{
  "info": {
    "name": "ViePropChain - To√†n B·ªô API (Qua API Gateway)",
    "description": "üì¶ Collection ƒë·∫ßy ƒë·ªß cho ViePropChain - T·∫•t c·∫£ requests ƒëi qua API Gateway (port 4000)\n\n**Ki·∫øn Tr√∫c:**\n- API Gateway: http://localhost:4000 (ƒëi·ªÉm v√†o duy nh·∫•t cho frontend)\n- Auth Service: 4010 (Gmail OAuth + Wallet Linking)\n- IPFS Service: 4002 (Upload ·∫£nh/metadata)\n- Admin Service: 4003 (Qu·∫£n l√Ω property)\n- Blockchain Service: 4004 (Smart contract)\n- Query Service: 4005 (T√¨m ki·∫øm property)\n- User Service: 4006 (Qu·∫£n l√Ω user profile)\n- KYC Service: 4007 (X√°c minh danh t√≠nh)\n- Marketplace Service: 4008 (Mua b√°n NFT)\n\n**Workflow:**\n1. Login b·∫±ng Gmail ‚Üí Nh·∫≠n JWT token\n2. L√†m KYC ƒë·ªÉ x√°c minh danh t√≠nh\n3. (Optional) Link wallet ƒë·ªÉ giao d·ªãch NFT\n4. T·∫°o property ‚Üí Upload ·∫£nh ‚Üí Mint NFT\n5. List NFT l√™n marketplace ‚Üí Nh·∫≠n offers ‚Üí B√°n",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "üìñ 0. H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng",
      "item": [
        {
          "name": "README - C√°ch Test API",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["health"]
            },
            "description": "## üöÄ H∆Ø·ªöNG D·∫™N TEST API VIEPROPCHAIN\n\n### **B∆∞·ªõc 1: Kh·ªüi ƒë·ªông c√°c services**\n\n```bash\n# Terminal 1: API Gateway (B·∫ÆT BU·ªòC)\ncd database_viepropchain_microservice/services/api-gateway\nnpm install\nnpm start\n‚Üí Ch·∫°y tr√™n port 4000\n\n# Terminal 2: Auth Service\ncd database_viepropchain_microservice/services/auth-service\nnpm start\n‚Üí Port 4010 (Gmail OAuth + Wallet)\n\n# Terminal 3: KYC Service\ncd database_viepropchain_microservice/services/kyc-service\nnpm start\n‚Üí Port 4007 (X√°c minh danh t√≠nh)\n\n# Terminal 4: User Service\ncd database_viepropchain_microservice/services/user-service\nnpm start\n‚Üí Port 4006 (User profile)\n\n# Terminal 5: Admin Service\ncd database_viepropchain_microservice/services/admin-service\nnpm start\n‚Üí Port 4003 (Qu·∫£n l√Ω property)\n\n# Terminal 6: IPFS Service\ncd database_viepropchain_microservice/services/ipfs-service\nnpm start\n‚Üí Port 4002 (Upload files)\n\n# Terminal 7: Blockchain Service\ncd database_viepropchain_microservice/services/blockchain-service\nnpm start\n‚Üí Port 4004 (Smart contract)\n\n# Terminal 8: Marketplace Service\ncd database_viepropchain_microservice/services/marketplace-service\nnpm start\n‚Üí Port 4008 (Mua b√°n NFT)\n\n# Terminal 9: Ganache (Blockchain local)\nganache -m \"arm either chef prosper fish lonely rigid antique dawn stumble wife camera\" --database.dbPath \"./ganache-data-dev\" --chain.networkId 1337 --server.port 8545\n```\n\n---\n\n### **B∆∞·ªõc 2: Login b·∫±ng Gmail (PH·∫¢I D√ôNG BROWSER)**\n\n‚ö†Ô∏è **QUAN TR·ªåNG**: Google OAuth KH√îNG th·ªÉ test trong Postman!\n\n**C√°ch l√†m:**\n\n1. M·ªü browser, truy c·∫≠p:\n   ```\n   http://localhost:4000/api/auth/google\n   ```\n\n2. Ch·ªçn t√†i kho·∫£n Gmail ƒë·ªÉ ƒëƒÉng nh·∫≠p\n\n3. Sau khi login th√†nh c√¥ng, browser redirect v·ªÅ:\n   ```\n   http://localhost:3000?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n   ```\n\n4. **Copy JWT token** t·ª´ URL (ph·∫ßn sau `?token=`)\n\n5. Paste v√†o Postman:\n   - Click **Environment** (g√≥c tr√™n b√™n ph·∫£i)\n   - T·∫°o variable: `jwt_token`\n   - Paste token v√†o Value\n   - Save\n\n---\n\n### **B∆∞·ªõc 3: Verify token**\n\nCh·∫°y request: **1. Auth & User ‚Üí Get My Info**\n\n```\nGET http://localhost:4000/api/auth/me\nHeader: Authorization: Bearer {{jwt_token}}\n```\n\nResponse s·∫Ω ch·ª©a:\n```json\n{\n  \"success\": true,\n  \"user\": {\n    \"userId\": \"507f1f77bcf86cd799439011\",\n    \"email\": \"example@gmail.com\",\n    \"emailVerified\": true,\n    \"walletAddress\": null,\n    \"kycVerified\": false,\n    \"authMethods\": [\"google\"]\n  }\n}\n```\n\n‚Üí Copy `userId` v√† set v√†o bi·∫øn `{{user_id}}`\n\n---\n\n### **B∆∞·ªõc 4: L√†m KYC**\n\nCh·∫°y request: **2. KYC ‚Üí Submit KYC**\n\n```\nPOST http://localhost:4000/api/kyc\nBody:\n{\n  \"fullName\": \"Nguy·ªÖn VƒÉn A\",\n  \"idNumber\": \"123456789012\"\n}\n```\n\n‚Üí KYC t·ª± ƒë·ªông verify ngay l·∫≠p t·ª©c\n\n---\n\n### **B∆∞·ªõc 5: (Optional) Link Wallet**\n\n**5.1. Get link message:**\n```\nPOST http://localhost:4000/api/auth/link-wallet/message\nBody:\n{\n  \"walletAddress\": \"0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb2\"\n}\n```\n\n**5.2. Generate signature b·∫±ng Node.js:**\n\nT·∫°o file `generate-wallet-signature.js`:\n```javascript\nconst { ethers } = require('ethers');\n\n// Private key t·ª´ Ganache account 0\nconst PRIVATE_KEY = '0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d';\nconst wallet = new ethers.Wallet(PRIVATE_KEY);\n\nconst message = 'Link wallet 0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb2 to account example@gmail.com';\n\nwallet.signMessage(message).then(signature => {\n  console.log('Signature:', signature);\n});\n```\n\nCh·∫°y: `node generate-wallet-signature.js`\n\n**5.3. Link wallet:**\n```\nPOST http://localhost:4000/api/auth/link-wallet\nBody:\n{\n  \"walletAddress\": \"0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb2\",\n  \"signature\": \"0x...\"\n}\n```\n\n‚Üí Set bi·∫øn `{{user_wallet}}` = \"0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb2\"\n\n---\n\n### **B∆∞·ªõc 6: T·∫°o Property**\n\nCh·∫°y request: **3. Property ‚Üí Create Property**\n\n‚Üí Nh·∫≠n `property_id`\n\n---\n\n### **B∆∞·ªõc 7: Upload ·∫£nh & Mint NFT**\n\n**7.1. Upload ·∫£nh:**\n```\nPOST http://localhost:4000/api/ipfs/upload/image\n‚Üí Nh·∫≠n image_cid\n```\n\n**7.2. Generate metadata:**\n```\nPOST http://localhost:4000/api/ipfs/upload/metadata\n‚Üí Nh·∫≠n metadata_cid\n```\n\n**7.3. Admin mint NFT:**\n```\nPOST http://localhost:4000/api/blockchain/mint\n‚Üí Nh·∫≠n token_id\n```\n\n---\n\n### **B∆∞·ªõc 8: List NFT l√™n Marketplace**\n\n```\nPOST http://localhost:4000/api/marketplace/listings\nBody:\n{\n  \"tokenId\": {{token_id}},\n  \"price\": \"1000000000000000000\",\n  \"description\": \"Beautiful villa for sale\"\n}\n```\n\n‚Üí Nh·∫≠n `listing_id`\n\n---\n\n### **B∆∞·ªõc 9: T·∫°o Offer**\n\n```\nPOST http://localhost:4000/api/marketplace/offers\nBody:\n{\n  \"listingId\": \"{{listing_id}}\",\n  \"price\": \"900000000000000000\",\n  \"message\": \"T√¥i mu·ªën mua\"\n}\n```\n\n---\n\n### **T√≥m t·∫Øt Flow:**\n\n```\n1. Login Gmail (Browser) ‚Üí jwt_token\n2. GET /api/auth/me ‚Üí user_id\n3. POST /api/kyc ‚Üí KYC verified\n4. POST /api/auth/link-wallet/message ‚Üí message\n5. Node.js generate signature\n6. POST /api/auth/link-wallet ‚Üí wallet linked\n7. POST /api/admin/properties ‚Üí property_id\n8. POST /api/ipfs/upload/image ‚Üí image_cid\n9. POST /api/ipfs/upload/metadata ‚Üí metadata_cid\n10. POST /api/blockchain/mint ‚Üí token_id\n11. POST /api/marketplace/listings ‚Üí listing_id\n12. POST /api/marketplace/offers ‚Üí offer created\n```\n\n**T·∫•t c·∫£ requests ƒëi qua API Gateway: http://localhost:4000/api/***"
          }
        }
      ]
    },
    {
      "name": "‚úÖ Health Checks",
      "item": [
        {
          "name": "API Gateway Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["health"]
            },
            "description": "Ki·ªÉm tra API Gateway ƒëang ch·∫°y"
          }
        },
        {
          "name": "Auth Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/auth/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "auth", "health"]
            },
            "description": "Ki·ªÉm tra Auth Service"
          }
        },
        {
          "name": "Marketplace Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "health"]
            },
            "description": "Ki·ªÉm tra Marketplace Service"
          }
        }
      ]
    },
    {
      "name": "1Ô∏è‚É£ Auth & User",
      "item": [
        {
          "name": "üåê Login Gmail (M·ªü trong Browser)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/auth/google",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "auth", "google"]
            },
            "description": "‚ö†Ô∏è **KH√îNG CH·∫†Y REQUEST N√ÄY TRONG POSTMAN!**\n\n**C√°ch l√†m:**\n1. Copy URL: http://localhost:4000/api/auth/google\n2. M·ªü **Browser**\n3. Paste URL v√† Enter\n4. Ch·ªçn Gmail ƒë·ªÉ login\n5. Sau khi login, copy JWT token t·ª´ URL redirect\n6. Paste v√†o bi·∫øn {{jwt_token}}"
          }
        },
        {
          "name": "Get My Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get user info success\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    if (jsonData.user && jsonData.user.userId) {",
                  "        pm.environment.set(\"user_id\", jsonData.user.userId);",
                  "        console.log(\"‚úÖ User ID: \" + jsonData.user.userId);",
                  "    }",
                  "    if (jsonData.user && jsonData.user.email) {",
                  "        pm.environment.set(\"user_email\", jsonData.user.email);",
                  "        console.log(\"üìß Email: \" + jsonData.user.email);",
                  "    }",
                  "    if (jsonData.user && jsonData.user.walletAddress) {",
                  "        pm.environment.set(\"user_wallet\", jsonData.user.walletAddress);",
                  "        console.log(\"üíº Wallet: \" + jsonData.user.walletAddress);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/auth/me",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "auth", "me"]
            },
            "description": "L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ JWT token"
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/auth/logout",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "auth", "logout"]
            },
            "description": "ƒêƒÉng xu·∫•t"
          }
        }
      ]
    },
    {
      "name": "2Ô∏è‚É£ KYC",
      "item": [
        {
          "name": "Submit KYC",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"KYC submitted\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    console.log(\"‚úÖ KYC Status: \" + jsonData.kyc.status);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"Nguy·ªÖn VƒÉn A\",\n  \"idNumber\": \"123456789012\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/kyc",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "kyc"]
            },
            "description": "N·ªôp KYC ƒë·ªÉ x√°c minh danh t√≠nh\n\n**L∆∞u √Ω:**\n- userId v√† email l·∫•y t·ª± ƒë·ªông t·ª´ JWT token\n- Kh√¥ng c·∫ßn g·ª≠i walletAddress\n- KYC t·ª± ƒë·ªông verify ngay"
          }
        },
        {
          "name": "Get My KYC",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/kyc/me",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "kyc", "me"]
            },
            "description": "L·∫•y th√¥ng tin KYC c·ªßa t√¥i"
          }
        },
        {
          "name": "Check Verified Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/kyc/me/verified",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "kyc", "me", "verified"]
            },
            "description": "Ki·ªÉm tra ƒë√£ verify ch∆∞a"
          }
        }
      ]
    },
    {
      "name": "3Ô∏è‚É£ Wallet Linking (Optional)",
      "item": [
        {
          "name": "Get Link Wallet Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Message generated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    console.log(\"üìù Message to sign:\");",
                  "    console.log(jsonData.message);",
                  "    console.log(\"\");",
                  "    console.log(\"‚ö†Ô∏è D√πng Node.js script ƒë·ªÉ generate signature!\");",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletAddress\": \"0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb2\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/auth/link-wallet/message",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "auth", "link-wallet", "message"]
            },
            "description": "L·∫•y message ƒë·ªÉ k√Ω b·∫±ng private key\n\n**Wallet t·ª´ Ganache:**\n- Address: 0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb2\n- Private Key: 0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d\n\n**Sau khi c√≥ message, d√πng file `generate-wallet-signature.js` ƒë·ªÉ t·∫°o signature**"
          }
        },
        {
          "name": "Link Wallet",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Wallet linked\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    if (jsonData.user && jsonData.user.walletAddress) {",
                  "        pm.environment.set(\"user_wallet\", jsonData.user.walletAddress);",
                  "        console.log(\"‚úÖ Wallet linked: \" + jsonData.user.walletAddress);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletAddress\": \"0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb2\",\n  \"signature\": \"0x...(paste signature t·ª´ Node.js script)\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/auth/link-wallet",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "auth", "link-wallet"]
            },
            "description": "Link wallet sau khi c√≥ signature\n\n**C√°ch generate signature:**\n\n1. T·∫°o file `generate-wallet-signature.js`\n2. Paste code t·ª´ README\n3. Ch·∫°y: node generate-wallet-signature.js\n4. Copy signature\n5. Paste v√†o body request n√†y"
          }
        },
        {
          "name": "Unlink Wallet",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/auth/unlink-wallet",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "auth", "unlink-wallet"]
            },
            "description": "G·ª° wallet kh·ªèi t√†i kho·∫£n"
          }
        }
      ]
    },
    {
      "name": "4Ô∏è‚É£ Property",
      "item": [
        {
          "name": "Create Property",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Property created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data._id) {",
                  "        pm.environment.set(\"property_id\", jsonData.data._id);",
                  "        console.log(\"‚úÖ Property ID: \" + jsonData.data._id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Bi·ªát Th·ª± Cao C·∫•p Qu·∫≠n 2\",\n  \"description\": \"Bi·ªát th·ª± 3 ph√≤ng ng·ªß c√≥ h·ªì b∆°i v√† v∆∞·ªùn\",\n  \"propertyType\": \"villa\",\n  \"address\": {\n    \"street\": \"123 Th·∫£o ƒêi·ªÅn\",\n    \"ward\": \"Th·∫£o ƒêi·ªÅn\",\n    \"district\": \"Qu·∫≠n 2\",\n    \"city\": \"TP. H·ªì Ch√≠ Minh\",\n    \"country\": \"Vi·ªát Nam\"\n  },\n  \"area\": 250,\n  \"price\": 15000000000,\n  \"currency\": \"VND\",\n  \"bedrooms\": 3,\n  \"bathrooms\": 3,\n  \"features\": [\"H·ªì B∆°i\", \"V∆∞·ªùn\", \"B√£i ƒê·∫≠u Xe\", \"An Ninh 24/7\"],\n  \"owner\": \"{{user_id}}\",\n  \"legalStatus\": \"verified\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/admin/properties",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "admin", "properties"]
            },
            "description": "T·∫°o property m·ªõi\n\n**L∆∞u √Ω:** owner = user_id (kh√¥ng ph·∫£i wallet)"
          }
        },
        {
          "name": "Get Property Detail",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/admin/properties/{{property_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "admin", "properties", "{{property_id}}"]
            },
            "description": "Xem chi ti·∫øt property"
          }
        },
        {
          "name": "Get All Properties",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/admin/properties",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "admin", "properties"]
            },
            "description": "Danh s√°ch t·∫•t c·∫£ properties"
          }
        },
        {
          "name": "Search Properties",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/query/properties?city=TP. H·ªì Ch√≠ Minh&propertyType=villa",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "query", "properties"],
              "query": [
                {
                  "key": "city",
                  "value": "TP. H·ªì Ch√≠ Minh"
                },
                {
                  "key": "propertyType",
                  "value": "villa"
                }
              ]
            },
            "description": "T√¨m ki·∫øm properties"
          }
        }
      ]
    },
    {
      "name": "5Ô∏è‚É£ IPFS Upload",
      "item": [
        {
          "name": "Upload Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Image uploaded\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.cid) {",
                  "        pm.environment.set(\"image_cid\", jsonData.cid);",
                  "        console.log(\"‚úÖ Image CID: \" + jsonData.cid);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Ch·ªçn file ·∫£nh ·ªü ƒë√¢y"
                }
              ]
            },
            "url": {
              "raw": "http://localhost:4000/api/ipfs/upload/image",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "ipfs", "upload", "image"]
            },
            "description": "Upload ·∫£nh l√™n IPFS\n\n‚ö†Ô∏è Ch·ªçn file trong Body ‚Üí form-data ‚Üí file"
          }
        },
        {
          "name": "Upload Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Metadata uploaded\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.cid) {",
                  "        pm.environment.set(\"metadata_cid\", jsonData.cid);",
                  "        console.log(\"‚úÖ Metadata CID: \" + jsonData.cid);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": \"{{property_id}}\",\n  \"imageCID\": \"{{image_cid}}\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/ipfs/upload/metadata",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "ipfs", "upload", "metadata"]
            },
            "description": "Auto-generate metadata t·ª´ property data"
          }
        },
        {
          "name": "Get Metadata Content",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/ipfs/content/{{metadata_cid}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "ipfs", "content", "{{metadata_cid}}"]
            },
            "description": "Xem n·ªôi dung metadata JSON"
          }
        }
      ]
    },
    {
      "name": "6Ô∏è‚É£ NFT Minting",
      "item": [
        {
          "name": "Admin Mint NFT",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"NFT minted\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.tokenId) {",
                  "        pm.environment.set(\"token_id\", jsonData.tokenId);",
                  "        console.log(\"‚úÖ Token ID: \" + jsonData.tokenId);",
                  "        console.log(\"üìú Tx Hash: \" + jsonData.transactionHash);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recipient\": \"{{user_wallet}}\",\n  \"tokenURI\": \"ipfs://{{metadata_cid}}\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/blockchain/mint",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "blockchain", "mint"]
            },
            "description": "Admin mint NFT cho user\n\n**Y√™u c·∫ßu:** User ƒë√£ link wallet"
          }
        },
        {
          "name": "Verify NFT Ownership",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/blockchain/nft/{{token_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "blockchain", "nft", "{{token_id}}"]
            },
            "description": "Ki·ªÉm tra owner c·ªßa NFT"
          }
        },
        {
          "name": "Get User's NFTs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/blockchain/nfts/{{user_wallet}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "blockchain", "nfts", "{{user_wallet}}"]
            },
            "description": "Danh s√°ch NFT c·ªßa user"
          }
        }
      ]
    },
    {
      "name": "6Ô∏è‚É£.1 NFT Info Helper",
      "item": [
        {
          "name": "Get My NFTs with Property Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/nft-info/{{user_wallet}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "nft-info", "{{user_wallet}}"]
            },
            "description": "**üéØ Endpoint quan tr·ªçng tr∆∞·ªõc khi list NFT!**\n\nL·∫•y danh s√°ch t·∫•t c·∫£ NFTs c·ªßa b·∫°n k√®m th√¥ng tin property chi ti·∫øt.\n\n**Response:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"tokenId\": 1,\n      \"owner\": \"0x742d35...\",\n      \"tokenURI\": \"ipfs://Qm...\",\n      \"metadata\": {\n        \"name\": \"ViePropChain #1\",\n        \"description\": \"Property NFT\",\n        \"image\": \"ipfs://Qm...\",\n        \"propertyId\": \"507f1f77bcf86cd799439011\"\n      },\n      \"property\": {\n        \"id\": \"507f1f77bcf86cd799439011\",\n        \"title\": \"Bi·ªát Th·ª± Cao C·∫•p Qu·∫≠n 2\",\n        \"propertyType\": \"villa\",\n        \"address\": {...},\n        \"area\": 250,\n        \"price\": 15000000000,\n        \"images\": [...]\n      },\n      \"readyToList\": true\n    }\n  ],\n  \"summary\": {\n    \"total\": 3,\n    \"readyToList\": 2\n  }\n}\n```\n\n**D√πng th√¥ng tin n√†y ƒë·ªÉ:**\n1. Bi·∫øt tokenId c·ªßa t·ª´ng NFT\n2. Xem property n√†o t∆∞∆°ng ·ª©ng\n3. Copy tokenId + propertyId ƒë·ªÉ t·∫°o listing"
          }
        },
        {
          "name": "Get NFT Detail by Token ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/nft-info/token/{{token_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": [
                "api",
                "marketplace",
                "nft-info",
                "token",
                "{{token_id}}"
              ]
            },
            "description": "Xem chi ti·∫øt 1 NFT c·ª• th·ªÉ k√®m th√¥ng tin property\n\n**D√πng ƒë·ªÉ:**\n- Verify NFT tr∆∞·ªõc khi t·∫°o listing\n- Xem ƒë·∫ßy ƒë·ªß th√¥ng tin property\n- Check ownership"
          }
        }
      ]
    },
    {
      "name": "7Ô∏è‚É£ Marketplace - Listings",
      "item": [
        {
          "name": "Browse Listings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/listings?page=1&limit=20&sortBy=listedAt&sortOrder=desc",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "listings"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "propertyType",
                  "value": "villa",
                  "disabled": true
                },
                {
                  "key": "city",
                  "value": "TP. H·ªì Ch√≠ Minh",
                  "disabled": true
                },
                {
                  "key": "minPrice",
                  "value": "1000000000000000000",
                  "disabled": true,
                  "description": "Wei"
                },
                {
                  "key": "maxPrice",
                  "value": "5000000000000000000",
                  "disabled": true,
                  "description": "Wei"
                },
                {
                  "key": "sortBy",
                  "value": "listedAt"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                }
              ]
            },
            "description": "Xem t·∫•t c·∫£ listings ƒëang active\n\nC√≥ th·ªÉ filter theo: propertyType, city, gi√°, s·∫Øp x·∫øp"
          }
        },
        {
          "name": "Get Listing Detail",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/listings/{{listing_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "listings", "{{listing_id}}"]
            },
            "description": "Chi ti·∫øt 1 listing"
          }
        },
        {
          "name": "Get Listing by Token ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/listings/token/{{token_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": [
                "api",
                "marketplace",
                "listings",
                "token",
                "{{token_id}}"
              ]
            },
            "description": "T√¨m listing theo NFT token ID"
          }
        },
        {
          "name": "Create Listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Listing created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data._id) {",
                  "        pm.environment.set(\"listing_id\", jsonData.data._id);",
                  "        console.log(\"‚úÖ Listing ID: \" + jsonData.data._id);",
                  "        console.log(\"üí∞ Gi√°: \" + jsonData.data.price.amount + \" wei\");",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tokenId\": {{token_id}},\n  \"contractAddress\": \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n  \"propertyId\": \"{{property_id}}\",\n  \"price\": \"1000000000000000000\",\n  \"description\": \"Bi·ªát th·ª± ƒë·∫πp c·∫ßn b√°n g·∫•p\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/marketplace/listings",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "listings"]
            },
            "description": "T·∫°o listing ƒë·ªÉ b√°n NFT\n\n**Y√™u c·∫ßu:**\n- Ph·∫£i c√≥ JWT token\n- Ph·∫£i ƒë√£ link wallet\n- Ph·∫£i l√† owner c·ªßa NFT\n\n**Gi√°:** Wei (1 ETH = 10^18 wei)"
          }
        },
        {
          "name": "Update Listing",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": \"1500000000000000000\",\n  \"description\": \"Gi·∫£m gi√°! B√°n g·∫•p!\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/marketplace/listings/{{listing_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "listings", "{{listing_id}}"]
            },
            "description": "C·∫≠p nh·∫≠t gi√° ho·∫∑c m√¥ t·∫£ (ch·ªâ seller)"
          }
        },
        {
          "name": "Cancel Listing",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/listings/{{listing_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "listings", "{{listing_id}}"]
            },
            "description": "H·ªßy listing (ch·ªâ seller)"
          }
        },
        {
          "name": "Get My Listings",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/listings/my/listings?status=active",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "listings", "my", "listings"],
              "query": [
                {
                  "key": "status",
                  "value": "active"
                }
              ]
            },
            "description": "Danh s√°ch listings c·ªßa t√¥i"
          }
        },
        {
          "name": "Track View",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/listings/{{listing_id}}/view",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": [
                "api",
                "marketplace",
                "listings",
                "{{listing_id}}",
                "view"
              ]
            },
            "description": "Track l∆∞·ª£t xem (analytics)"
          }
        }
      ]
    },
    {
      "name": "8Ô∏è‚É£ Marketplace - Offers",
      "item": [
        {
          "name": "Create Offer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Offer created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data._id) {",
                  "        pm.environment.set(\"offer_id\", jsonData.data._id);",
                  "        console.log(\"‚úÖ Offer ID: \" + jsonData.data._id);",
                  "        console.log(\"üí∞ Gi√° offer: \" + jsonData.data.price.amount + \" wei\");",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"listingId\": \"{{listing_id}}\",\n  \"price\": \"900000000000000000\",\n  \"message\": \"T√¥i mu·ªën mua BƒêS n√†y v·ªõi gi√° 0.9 ETH\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/marketplace/offers",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "offers"]
            },
            "description": "T·∫°o offer cho 1 listing\n\n**Y√™u c·∫ßu:**\n- Ph·∫£i ƒëƒÉng nh·∫≠p\n- Ph·∫£i link wallet\n- Kh√¥ng th·ªÉ offer listing c·ªßa ch√≠nh m√¨nh\n- Listing ph·∫£i ƒëang active"
          }
        },
        {
          "name": "Get Offers by Listing",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/offers/listing/{{listing_id}}?status=pending",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": [
                "api",
                "marketplace",
                "offers",
                "listing",
                "{{listing_id}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "pending"
                }
              ]
            },
            "description": "Xem t·∫•t c·∫£ offers cho 1 listing"
          }
        },
        {
          "name": "Get My Offers (as Buyer)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/offers/my/offers?status=pending",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "offers", "my", "offers"],
              "query": [
                {
                  "key": "status",
                  "value": "pending"
                }
              ]
            },
            "description": "Danh s√°ch offers t√¥i ƒë√£ t·∫°o (vai tr√≤ buyer)"
          }
        },
        {
          "name": "Get Offers Received (as Seller)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/offers/my/received?status=pending",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "offers", "my", "received"],
              "query": [
                {
                  "key": "status",
                  "value": "pending"
                }
              ]
            },
            "description": "Danh s√°ch offers nh·∫≠n ƒë∆∞·ª£c tr√™n listings c·ªßa t√¥i (vai tr√≤ seller)"
          }
        },
        {
          "name": "Accept Offer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionHash\": \"0x1234567890abcdef...\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/marketplace/offers/{{offer_id}}/accept",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "offers", "{{offer_id}}", "accept"]
            },
            "description": "Ch·∫•p nh·∫≠n offer (ch·ªâ seller)\n\n**Hi·ªáu ·ª©ng:**\n- Offer ‚Üí accepted\n- Listing ‚Üí sold\n- T·∫•t c·∫£ offers kh√°c ‚Üí rejected\n\n**L∆∞u √Ω:** Trong production, ph·∫£i th·ª±c hi·ªán transaction blockchain tr∆∞·ªõc, r·ªìi g·ª≠i tx hash"
          }
        },
        {
          "name": "Reject Offer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Xin l·ªói, gi√° qu√° th·∫•p\"\n}"
            },
            "url": {
              "raw": "http://localhost:4000/api/marketplace/offers/{{offer_id}}/reject",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "offers", "{{offer_id}}", "reject"]
            },
            "description": "T·ª´ ch·ªëi offer (ch·ªâ seller)"
          }
        },
        {
          "name": "Cancel Offer",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4000/api/marketplace/offers/{{offer_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4000",
              "path": ["api", "marketplace", "offers", "{{offer_id}}"]
            },
            "description": "H·ªßy offer (ch·ªâ buyer)"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "jwt_token",
      "value": "",
      "type": "string",
      "description": "JWT token t·ª´ Gmail OAuth (paste sau khi login)"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "User ID t·ª´ Auth Service"
    },
    {
      "key": "user_email",
      "value": "",
      "type": "string",
      "description": "Email t·ª´ Gmail"
    },
    {
      "key": "user_wallet",
      "value": "",
      "type": "string",
      "description": "Wallet address sau khi link (optional)"
    },
    {
      "key": "property_id",
      "value": "",
      "type": "string",
      "description": "Property ID"
    },
    {
      "key": "image_cid",
      "value": "",
      "type": "string",
      "description": "IPFS CID c·ªßa ·∫£nh"
    },
    {
      "key": "metadata_cid",
      "value": "",
      "type": "string",
      "description": "IPFS CID c·ªßa metadata"
    },
    {
      "key": "token_id",
      "value": "",
      "type": "string",
      "description": "NFT Token ID"
    },
    {
      "key": "listing_id",
      "value": "",
      "type": "string",
      "description": "Marketplace Listing ID"
    },
    {
      "key": "offer_id",
      "value": "",
      "type": "string",
      "description": "Offer ID"
    }
  ]
}
