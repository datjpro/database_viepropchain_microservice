{
  "info": {
    "name": "ViePropChain - Gmail OAuth Flow (NEW)",
    "description": "üÜï Test workflow m·ªõi: Gmail Login ‚Üí KYC ‚Üí Optional Wallet Link ‚Üí NFT Minting\n\n**THAY ƒê·ªîI L·ªöN:**\n- User login b·∫±ng Gmail thay v√¨ MetaMask\n- KYC d√πng userId thay v√¨ wallet\n- Wallet linking l√† OPTIONAL\n- Admin mint NFT cho user",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "0. Setup Instructions",
      "item": [
        {
          "name": "üìñ README - How to Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4001/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4001",
              "path": ["health"]
            },
            "description": "## üöÄ H∆Ø·ªöNG D·∫™N TEST GMAIL OAUTH FLOW\n\n### **B∆∞·ªõc 1: Start Services**\n```bash\n# Terminal 1: Auth Service\ncd services/auth-service\nnpm start\n\n# Terminal 2: KYC Service  \ncd services/kyc-service\nnpm start\n\n# Terminal 3: User Service\ncd services/user-service\nnpm start\n\n# Terminal 4: Admin Service\ncd services/admin-service\nnpm start\n\n# Terminal 5: Blockchain Service\ncd services/blockchain-service\nnpm start\n\n# Terminal 6: IPFS Service\ncd services/ipfs-service\nnpm start\n```\n\n### **B∆∞·ªõc 2: Test Google OAuth (MANUAL - D√πng Browser)**\n\n‚ö†Ô∏è **QUAN TR·ªåNG**: Google OAuth KH√îNG TH·ªÇ test trong Postman!\n\nB·∫°n ph·∫£i d√πng **Browser** ƒë·ªÉ test:\n\n1. M·ªü browser, truy c·∫≠p:\n   ```\n   http://localhost:4001/auth/google\n   ```\n\n2. Ch·ªçn t√†i kho·∫£n Gmail ƒë·ªÉ ƒëƒÉng nh·∫≠p\n\n3. Sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng, b·∫°n s·∫Ω ƒë∆∞·ª£c redirect v·ªÅ:\n   ```\n   http://localhost:3000?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n   ```\n\n4. **Copy JWT token** t·ª´ URL (ph·∫ßn sau `?token=`)\n\n5. Paste token v√†o Postman Environment variable:\n   - Variable name: `jwt_token`\n   - Value: `<paste token ·ªü ƒë√¢y>`\n\n### **B∆∞·ªõc 3: Test trong Postman**\n\nSau khi c√≥ JWT token, b·∫°n c√≥ th·ªÉ test c√°c endpoints sau:\n- ‚úÖ Get My Info (`/auth/me`)\n- ‚úÖ Submit KYC (`POST /kyc`)\n- ‚úÖ Get My KYC (`GET /kyc/me`)\n- ‚úÖ Link Wallet (optional)\n- ‚úÖ Admin mint NFT cho user\n\n### **L∆∞u √Ω:**\n- JWT token h·∫øt h·∫°n sau 7 ng√†y (ho·∫∑c theo config)\n- N·∫øu token h·∫øt h·∫°n, login l·∫°i b·∫±ng browser\n- User c√≥ th·ªÉ d√πng app m√† KH√îNG c·∫ßn link wallet!"
          }
        }
      ]
    },
    {
      "name": "1. Health Checks",
      "item": [
        {
          "name": "Auth Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4001/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4001",
              "path": ["health"]
            }
          }
        },
        {
          "name": "KYC Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4007/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4007",
              "path": ["health"]
            }
          }
        },
        {
          "name": "User Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4006/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4006",
              "path": ["health"]
            }
          }
        },
        {
          "name": "Admin Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4003/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4003",
              "path": ["health"]
            }
          }
        },
        {
          "name": "Blockchain Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4004/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4004",
              "path": ["health"]
            }
          }
        },
        {
          "name": "IPFS Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4002/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4002",
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Gmail OAuth Login (BROWSER ONLY)",
      "item": [
        {
          "name": "üåê Step 1: Open in Browser",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4001/auth/google",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4001",
              "path": ["auth", "google"]
            },
            "description": "‚ö†Ô∏è **KH√îNG TH·ªÇ CH·∫†Y REQUEST N√ÄY TRONG POSTMAN!**\n\n**L√†m th·∫ø n√†o:**\n1. Copy URL: `http://localhost:4001/auth/google`\n2. M·ªü **Browser** (Chrome/Edge/Firefox)\n3. Paste URL v√†o browser v√† Enter\n4. Ch·ªçn t√†i kho·∫£n Gmail ƒë·ªÉ login\n5. Sau khi login th√†nh c√¥ng, browser s·∫Ω redirect v·ªÅ:\n   ```\n   http://localhost:3000?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n   ```\n6. **Copy JWT token** t·ª´ URL (ph·∫ßn sau `?token=`)\n7. Paste v√†o Environment variable `jwt_token`\n8. Ti·∫øp t·ª•c test c√°c endpoint kh√°c trong Postman\n\n**T·∫°i sao ph·∫£i d√πng Browser?**\n- Google OAuth y√™u c·∫ßu user interaction (ch·ªçn account, consent)\n- Postman kh√¥ng support OAuth popup/redirect flow\n- JWT token ƒë∆∞·ª£c tr·∫£ v·ªÅ qua URL redirect"
          }
        },
        {
          "name": "‚úÖ Step 2: Get My Info (After Login)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User logged in\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    ",
                  "    // Save user info to environment",
                  "    pm.environment.set(\"user_id\", jsonData.user._id);",
                  "    pm.environment.set(\"user_email\", jsonData.user.email);",
                  "    pm.environment.set(\"user_wallet\", jsonData.user.walletAddress || \"\");",
                  "    ",
                  "    console.log(\"‚úÖ User ID: \" + jsonData.user._id);",
                  "    console.log(\"üìß Email: \" + jsonData.user.email);",
                  "    console.log(\"üëõ Wallet: \" + (jsonData.user.walletAddress || \"Not linked yet\"));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4001/auth/me",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4001",
              "path": ["auth", "me"]
            },
            "description": "**Sau khi login Gmail th√†nh c√¥ng:**\n\n1. Paste JWT token v√†o Environment variable `jwt_token`\n2. Ch·∫°y request n√†y ƒë·ªÉ verify token\n3. Response s·∫Ω ch·ª©a:\n   - `userId`: ID c·ªßa user trong database\n   - `email`: Email t·ª´ Gmail\n   - `emailVerified`: true/false\n   - `walletAddress`: null (n·∫øu ch∆∞a link wallet)\n   - `authMethods`: [\"google\"] ho·∫∑c [\"google\", \"wallet\"]"
          }
        },
        {
          "name": "üö™ Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4001/auth/logout",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4001",
              "path": ["auth", "logout"]
            },
            "description": "Logout - clear session v√† token"
          }
        }
      ]
    },
    {
      "name": "3. KYC Verification (userId-based)",
      "item": [
        {
          "name": "‚úÖ Submit KYC (with JWT)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"KYC submitted successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.data.status).to.eql(\"verified\");",
                  "    ",
                  "    console.log(\"‚úÖ KYC Verified!\");",
                  "    console.log(\"üìß Email: \" + jsonData.data.email);",
                  "    console.log(\"üë§ Full Name: \" + jsonData.data.fullName);",
                  "    console.log(\"üÜî ID Number: \" + jsonData.data.idNumber);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"Nguyen Van A\",\n  \"idNumber\": \"123456789012\"\n}"
            },
            "url": {
              "raw": "http://localhost:4007/kyc",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4007",
              "path": ["kyc"]
            },
            "description": "**üÜï THAY ƒê·ªîI L·ªöN:**\n\n**TR∆Ø·ªöC:**\n```json\n{\n  \"walletAddress\": \"0x...\",\n  \"fullName\": \"...\",\n  \"idNumber\": \"...\"\n}\n```\n\n**SAU (HI·ªÜN T·∫†I):**\n```json\n{\n  \"fullName\": \"...\",\n  \"idNumber\": \"...\"\n}\n```\n\n**Gi·∫£i th√≠ch:**\n- `userId` v√† `email` ƒë∆∞·ª£c l·∫•y T·ª∞ ƒê·ªòNG t·ª´ JWT token\n- Kh√¥ng c·∫ßn g·ª≠i `walletAddress` n·ªØa\n- Wallet l√† OPTIONAL, c√≥ th·ªÉ link sau\n- KYC Service t·ª± ƒë·ªông:\n  1. Extract userId/email t·ª´ JWT\n  2. Create KYC record\n  3. Auto verify (status: \"verified\")\n  4. Notify User Service ƒë·ªÉ update profile"
          }
        },
        {
          "name": "üìã Get My KYC",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4007/kyc/me",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4007",
              "path": ["kyc", "me"]
            },
            "description": "Get KYC c·ªßa user hi·ªán t·∫°i (d√πng userId t·ª´ JWT)"
          }
        },
        {
          "name": "‚úîÔ∏è Check My Verified Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4007/kyc/me/verified",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4007",
              "path": ["kyc", "me", "verified"]
            },
            "description": "Check xem user hi·ªán t·∫°i ƒë√£ verified ch∆∞a"
          }
        },
        {
          "name": "üìä Get All Verified Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4007/verified/all",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4007",
              "path": ["verified", "all"]
            }
          }
        },
        {
          "name": "üìà KYC Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4007/statistics",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4007",
              "path": ["statistics"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Wallet Linking (OPTIONAL)",
      "item": [
        {
          "name": "üîó Step 1: Get Link Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Message generated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    ",
                  "    console.log(\"üìù Message to sign:\");",
                  "    console.log(jsonData.message);",
                  "    console.log(\"\");",
                  "    console.log(\"‚ö†Ô∏è NEXT STEP: Sign this message with MetaMask!\");",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletAddress\": \"0xd1ABb2a4Bb9652f90E0944AFfDf53F0cFFf54D13\"\n}"
            },
            "url": {
              "raw": "http://localhost:4001/auth/link-wallet/message",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4001",
              "path": ["auth", "link-wallet", "message"]
            },
            "description": "**OPTIONAL STEP: N·∫øu user mu·ªën link MetaMask wallet**\n\n1. G·ª≠i request n√†y v·ªõi `walletAddress`\n2. Backend tr·∫£ v·ªÅ message c·∫ßn k√Ω\n3. User d√πng MetaMask ƒë·ªÉ sign message\n4. G·ª≠i signature v√†o Step 2\n\n**L∆∞u √Ω:**\n- Wallet linking l√† OPTIONAL\n- User c√≥ th·ªÉ d√πng app m√† kh√¥ng c·∫ßn wallet\n- Ch·ªâ c·∫ßn wallet khi:\n  - Mu·ªën s·ªü h·ªØu NFT\n  - Mu·ªën trade NFT\n  - Mu·ªën interact v·ªõi blockchain"
          }
        },
        {
          "name": "üîó Step 2: Link Wallet with Signature",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Wallet linked successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    ",
                  "    pm.environment.set(\"user_wallet\", jsonData.user.walletAddress);",
                  "    ",
                  "    console.log(\"‚úÖ Wallet linked successfully!\");",
                  "    console.log(\"üëõ Wallet: \" + jsonData.user.walletAddress);",
                  "    console.log(\"üîê Auth methods: \" + jsonData.user.authMethods.join(\", \"));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletAddress\": \"0xd1ABb2a4Bb9652f90E0944AFfDf53F0cFFf54D13\",\n  \"signature\": \"0x...(signature from MetaMask)...\"\n}"
            },
            "url": {
              "raw": "http://localhost:4001/auth/link-wallet",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4001",
              "path": ["auth", "link-wallet"]
            },
            "description": "**Link wallet to Gmail account:**\n\n1. Copy message t·ª´ Step 1\n2. Sign message b·∫±ng MetaMask:\n   ```javascript\n   const signature = await ethereum.request({\n     method: 'personal_sign',\n     params: [message, walletAddress]\n   });\n   ```\n3. Paste signature v√†o body\n4. G·ª≠i request\n\n**Sau khi link th√†nh c√¥ng:**\n- User gi·ªù c√≥ 2 auth methods: [\"google\", \"wallet\"]\n- User c√≥ th·ªÉ login b·∫±ng Gmail HO·∫∂C wallet\n- KYC record ƒë∆∞·ª£c update v·ªõi walletAddress\n- User Profile ƒë∆∞·ª£c update v·ªõi walletAddress"
          }
        },
        {
          "name": "üîì Unlink Wallet",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:4001/auth/unlink-wallet",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4001",
              "path": ["auth", "unlink-wallet"]
            },
            "description": "Unlink wallet kh·ªèi account (rare use case)"
          }
        }
      ]
    },
    {
      "name": "5. Property Management",
      "item": [
        {
          "name": "Create Property",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Property created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.environment.set(\"property_id\", jsonData.data._id);",
                  "    console.log(\"‚úÖ Property ID: \" + jsonData.data._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Luxury Villa in District 2\",\n  \"description\": \"Beautiful 3-bedroom villa with swimming pool and garden\",\n  \"propertyType\": \"villa\",\n  \"address\": {\n    \"street\": \"123 Thao Dien\",\n    \"ward\": \"Thao Dien\",\n    \"district\": \"District 2\",\n    \"city\": \"Ho Chi Minh City\",\n    \"country\": \"Vietnam\"\n  },\n  \"area\": 250,\n  \"price\": 15000000000,\n  \"currency\": \"VND\",\n  \"bedrooms\": 3,\n  \"bathrooms\": 3,\n  \"features\": [\"Swimming Pool\", \"Garden\", \"Parking\", \"Security\"],\n  \"owner\": \"{{user_id}}\",\n  \"legalStatus\": \"verified\"\n}"
            },
            "url": {
              "raw": "http://localhost:4003/properties",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4003",
              "path": ["properties"]
            },
            "description": "‚ö†Ô∏è **L∆ØU √ù**: `owner` gi·ªù l√† `userId` (t·ª´ Gmail OAuth), kh√¥ng ph·∫£i `walletAddress`"
          }
        },
        {
          "name": "Get Property Detail",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4003/properties/{{property_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4003",
              "path": ["properties", "{{property_id}}"]
            }
          }
        },
        {
          "name": "Get All Properties",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4003/properties",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4003",
              "path": ["properties"]
            }
          }
        }
      ]
    },
    {
      "name": "6. IPFS Upload",
      "item": [
        {
          "name": "Upload Property Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Image uploaded\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.environment.set(\"image_cid\", jsonData.data.cid);",
                  "    console.log(\"‚úÖ Image CID: \" + jsonData.data.cid);",
                  "    console.log(\"üîó Gateway URL: \" + jsonData.data.gateway);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Ch·ªçn file ·∫£nh property t·ª´ m√°y t√≠nh"
                },
                {
                  "key": "propertyId",
                  "value": "{{property_id}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "http://localhost:4002/upload/image",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4002",
              "path": ["upload", "image"]
            },
            "description": "‚ö†Ô∏è Ch·ªçn file ·∫£nh trong tab **Body ‚Üí form-data ‚Üí file**"
          }
        },
        {
          "name": "Upload NFT Metadata (Auto-Generated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Metadata uploaded\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.environment.set(\"metadata_cid\", jsonData.data.cid);",
                  "    console.log(\"‚úÖ Metadata CID: \" + jsonData.data.cid);",
                  "    console.log(\"üîó Token URI: ipfs://\" + jsonData.data.cid);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": \"{{property_id}}\",\n  \"imageCID\": \"{{image_cid}}\"\n}"
            },
            "url": {
              "raw": "http://localhost:4002/upload/metadata",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4002",
              "path": ["upload", "metadata"]
            },
            "description": "‚ú® Auto-generate metadata t·ª´ property data"
          }
        },
        {
          "name": "Get Metadata Content",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4002/content/{{metadata_cid}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4002",
              "path": ["content", "{{metadata_cid}}"]
            },
            "description": "Preview metadata JSON"
          }
        }
      ]
    },
    {
      "name": "7. NFT Minting (Admin mints for User)",
      "item": [
        {
          "name": "üé® Admin Mints NFT for User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"NFT minted successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.environment.set(\"token_id\", jsonData.data.tokenId);",
                  "    ",
                  "    console.log(\"‚úÖ NFT Minted!\");",
                  "    console.log(\"üé´ Token ID: \" + jsonData.data.tokenId);",
                  "    console.log(\"üë§ Owner: \" + jsonData.data.recipient);",
                  "    console.log(\"üîó Token URI: \" + jsonData.data.tokenURI);",
                  "    console.log(\"‚õΩ Gas Used: \" + jsonData.data.gasUsed);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recipient\": \"{{user_wallet}}\",\n  \"tokenURI\": \"ipfs://{{metadata_cid}}\"\n}"
            },
            "url": {
              "raw": "http://localhost:4004/mint",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4004",
              "path": ["mint"]
            },
            "description": "**üÜï WORKFLOW M·ªöI:**\n\n1. User login Gmail ‚Üí KYC ‚Üí (Optional: Link wallet)\n2. User t·∫°o property\n3. User upload ·∫£nh ‚Üí IPFS\n4. IPFS auto-generate metadata\n5. **ADMIN** mint NFT cho user\n6. User s·ªü h·ªØu NFT ngay l·∫≠p t·ª©c!\n\n**L∆∞u √Ω:**\n- `recipient` = `user_wallet` (n·∫øu user ƒë√£ link wallet)\n- Admin k√Ω transaction b·∫±ng ADMIN_PRIVATE_KEY\n- User nh·∫≠n ownership c·ªßa NFT\n- Kh√¥ng c·∫ßn transfer th√™m!"
          }
        },
        {
          "name": "‚úÖ Verify NFT Ownership",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User owns the NFT\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.data.owner.toLowerCase()).to.eql(pm.environment.get(\"user_wallet\").toLowerCase());",
                  "    ",
                  "    console.log(\"‚úÖ Verified: User owns NFT #\" + jsonData.data.tokenId);",
                  "    console.log(\"üë§ Owner: \" + jsonData.data.owner);",
                  "    console.log(\"üîó Token URI: \" + jsonData.data.tokenURI);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4004/nft/{{token_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4004",
              "path": ["nft", "{{token_id}}"]
            },
            "description": "Verify user s·ªü h·ªØu NFT"
          }
        },
        {
          "name": "üìã Get User's NFTs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4004/nfts/{{user_wallet}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4004",
              "path": ["nfts", "{{user_wallet}}"]
            },
            "description": "Get t·∫•t c·∫£ NFT c·ªßa user"
          }
        },
        {
          "name": "üé´ Get Token Counter",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4004/token-counter",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4004",
              "path": ["token-counter"]
            },
            "description": "Get t·ªïng s·ªë NFT ƒë√£ mint"
          }
        }
      ]
    },
    {
      "name": "8. NFT Management (Owner Operations)",
      "item": [
        {
          "name": "Get NFT Details (Admin Service)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4003/nfts/{{token_id}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4003",
              "path": ["nfts", "{{token_id}}"]
            },
            "description": "Get NFT details t·ª´ Admin Service (property info, owner, price, etc.)"
          }
        },
        {
          "name": "List NFT for Sale",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": \"1000000000000000000\",\n  \"seller\": \"{{user_wallet}}\",\n  \"listingId\": 1\n}"
            },
            "url": {
              "raw": "http://localhost:4003/nfts/{{token_id}}/list",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4003",
              "path": ["nfts", "{{token_id}}", "list"]
            },
            "description": "List NFT for sale (price in wei: 1 ETH = 10^18 wei)"
          }
        },
        {
          "name": "Get Listed NFTs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:4003/nfts/marketplace/listed",
              "protocol": "http",
              "host": ["localhost"],
              "port": "4003",
              "path": ["nfts", "marketplace", "listed"]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "jwt_token",
      "value": "",
      "type": "string",
      "description": "JWT token from Gmail OAuth (paste after login)"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "User ID (from Auth Service)"
    },
    {
      "key": "user_email",
      "value": "",
      "type": "string",
      "description": "User email (from Gmail)"
    },
    {
      "key": "user_wallet",
      "value": "",
      "type": "string",
      "description": "User wallet address (after linking, optional)"
    },
    {
      "key": "property_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "image_cid",
      "value": "",
      "type": "string"
    },
    {
      "key": "metadata_cid",
      "value": "",
      "type": "string"
    },
    {
      "key": "token_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_wallet",
      "value": "0xC6890b26A32d9d92aefbc8635C4588247529CdfE",
      "type": "string",
      "description": "Admin wallet address (for reference)"
    }
  ]
}
