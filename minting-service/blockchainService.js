// minting-service/blockchainService.js
const path = require("path");
require("dotenv").config({ path: path.join(__dirname, ".env") }); // Load from same directory
const { ethers } = require("ethers");
const mongoose = require("mongoose");
const NFT = require("./nftModel");
const { uploadToIPFS } = require("./ipfsService");
// ƒê·ªçc ABI t·ª´ file JSON ƒë√£ copy
const contractABI = require("./contract-abi.json").contracts.ViePropChainNFT
  .abi;

// Kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng c·∫ßn thi·∫øt ƒë·ªÉ k·∫øt n·ªëi v√† t∆∞∆°ng t√°c
let provider, signer, nftContract;

try {
  // Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc
  if (!process.env.CONTRACT_OWNER_PRIVATE_KEY) {
    throw new Error("CONTRACT_OWNER_PRIVATE_KEY is not defined in .env file");
  }
  if (!process.env.NFT_CONTRACT_ADDRESS) {
    throw new Error("NFT_CONTRACT_ADDRESS is not defined in .env file");
  }

  provider = new ethers.JsonRpcProvider(
    process.env.RPC_URL || "http://localhost:8545",
    {
      name: "ganache",
      chainId: 1337,
      ensAddress: null,
    }
  );

  // X·ª≠ l√Ω private key - lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p v√† ƒë·∫£m b·∫£o c√≥ 0x prefix
  let privateKey = process.env.CONTRACT_OWNER_PRIVATE_KEY.replace(
    /"/g,
    ""
  ).trim();
  if (!privateKey.startsWith("0x")) {
    privateKey = "0x" + privateKey;
  }

  signer = new ethers.Wallet(privateKey, provider);
  nftContract = new ethers.Contract(
    process.env.NFT_CONTRACT_ADDRESS.replace(/"/g, "").trim(),
    contractABI,
    signer
  );
  console.log("‚úÖ Blockchain service initialized successfully");
} catch (error) {
  console.error("Error initializing blockchain:", error.message);
  process.exit(1);
}

async function mintNFT(recipient, metadata) {
  try {
    console.log(`B·∫Øt ƒë·∫ßu mint cho ${recipient} v·ªõi metadata:`, metadata);

    // T·∫°o metadata JSON
    const nftMetadata = {
      name: metadata.name,
      description: metadata.description || "",
      image: metadata.image || "",
      attributes: metadata.attributes || [],
    };

    // Upload metadata l√™n IPFS v·ªõi fallback n·∫øu th·∫•t b·∫°i
    let ipfsHash = null;
    let tokenURI = "";

    try {
      console.log("üì§ ƒêang upload metadata l√™n IPFS...");
      ipfsHash = await uploadToIPFS(nftMetadata);
      tokenURI = `ipfs://${ipfsHash}`;
      console.log(`‚úÖ ƒê√£ upload l√™n IPFS: ${ipfsHash}`);
    } catch (ipfsError) {
      console.warn("‚ö†Ô∏è IPFS upload th·∫•t b·∫°i, s·ª≠ d·ª•ng fallback URL");
      console.warn("IPFS Error:", ipfsError.message);
      // Fallback: t·∫°o temporary URL ho·∫∑c d√πng centralized storage
      tokenURI = `https://api.example.com/metadata/${Date.now()}`;
    }

    console.log(`TokenURI: ${tokenURI}`);

    // Mint NFT tr√™n blockchain
    const tx = await nftContract.mint(recipient, tokenURI);
    console.log("ƒêang ch·ªù giao d·ªãch ƒë∆∞·ª£c x√°c nh·∫≠n...", tx.hash);

    // Ch·ªù giao d·ªãch ƒë∆∞·ª£c khai th√°c v√† l·∫•y bi√™n lai
    const receipt = await tx.wait();
    console.log("Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!");

    // L·∫•y Token ID t·ª´ s·ª± ki·ªán "Transfer" trong bi√™n lai
    console.log(`üìã S·ªë l∆∞·ª£ng logs: ${receipt.logs.length}`);

    let tokenId = null;

    // Th·ª≠ parse t·ª´ng log ƒë·ªÉ t√¨m Transfer event
    for (const log of receipt.logs) {
      try {
        const parsed = nftContract.interface.parseLog({
          topics: log.topics,
          data: log.data,
        });

        console.log(`üîç Event t√¨m th·∫•y: ${parsed.name}`);

        if (parsed.name === "Transfer") {
          tokenId = parsed.args.tokenId.toString();
          console.log(`‚úÖ T√¨m th·∫•y Transfer event, tokenId: ${tokenId}`);
          break;
        }
      } catch (error) {
        // Log kh√¥ng ph·∫£i t·ª´ contract n√†y, skip
        continue;
      }
    }

    if (!tokenId) {
      // Fallback 1: Th·ª≠ l·∫•y t·ª´ tokenCounter
      try {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Transfer event, th·ª≠ tokenCounter...");
        const counter = await nftContract.tokenCounter();
        tokenId = counter.toString();
        console.log(`üìä TokenId t·ª´ counter: ${tokenId}`);
      } catch (counterError) {
        console.log("‚ùå tokenCounter() kh√¥ng ho·∫°t ƒë·ªông:", counterError.message);

        // Fallback 2: Parse raw logs tr·ª±c ti·∫øp
        console.log("üîÑ Th·ª≠ parse raw logs...");
        for (const log of receipt.logs) {
          // Transfer event signature: Transfer(address,address,uint256)
          const transferTopic =
            "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
          if (log.topics[0] === transferTopic && log.topics.length >= 4) {
            // tokenId l√† topic th·ª© 4 (index 3)
            tokenId = parseInt(log.topics[3], 16).toString();
            console.log(`‚úÖ L·∫•y tokenId t·ª´ raw log: ${tokenId}`);
            break;
          }
        }

        // Fallback 3: D√πng timestamp n·∫øu kh√¥ng c√≥ c√°ch n√†o kh√°c
        if (!tokenId) {
          tokenId = `temp_${Date.now()}`;
          console.log(`‚ö†Ô∏è D√πng temporary tokenId: ${tokenId}`);
        }
      }
    }

    // L∆∞u th√¥ng tin NFT v√†o MongoDB
    const nftData = {
      tokenId,
      owner: recipient,
      name: metadata.name,
      description: metadata.description,
      image: metadata.image,
      attributes: metadata.attributes,
      tokenURI,
      transactionHash: tx.hash,
    };

    // Ch·ªâ th√™m ipfsHash n·∫øu c√≥
    if (ipfsHash) {
      nftData.ipfsHash = ipfsHash;
    }

    const newNFT = new NFT(nftData);
    await newNFT.save();
    console.log(`‚úÖ NFT ${tokenId} ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o MongoDB`);

    const response = {
      success: true,
      tokenId,
      transactionHash: tx.hash,
      tokenURI,
    };

    // Th√™m ipfsHash v√†o response n·∫øu c√≥
    if (ipfsHash) {
      response.ipfsHash = ipfsHash;
    }

    return response;
  } catch (error) {
    console.error("L·ªói khi mint NFT:", error.message);
    console.error("Stack:", error.stack);
    return { success: false, error: error.message };
  }
}

module.exports = { mintNFT };
