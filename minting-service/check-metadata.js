// Script ki·ªÉm tra metadata c·ªßa NFT tr√™n blockchain
const { ethers } = require("ethers");
const path = require("path");
require("dotenv").config({ path: path.join(__dirname, ".env") });

async function checkNFTMetadata(tokenId) {
  try {
    console.log('\nüîç KI·ªÇM TRA METADATA C·ª¶A NFT\n');
    console.log('='.repeat(60));

    // K·∫øt n·ªëi v·ªõi Ganache
    const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);
    
    // Load ABI
    const contractABI = require("./contract-abi.json");
    const abi = contractABI.contracts.ViePropChainNFT.abi;
    
    // K·∫øt n·ªëi v·ªõi contract
    const contract = new ethers.Contract(
      process.env.NFT_CONTRACT_ADDRESS,
      abi,
      provider
    );

    console.log(`üìã Contract: ${process.env.NFT_CONTRACT_ADDRESS}`);
    console.log(`üìã Token ID: ${tokenId}\n`);
    
    // Ki·ªÉm tra owner
    const owner = await contract.ownerOf(tokenId);
    console.log(`‚úÖ Owner: ${owner}`);
    
    // L·∫•y tokenURI
    const tokenURI = await contract.tokenURI(tokenId);
    console.log(`‚úÖ Token URI: ${tokenURI}`);
    
    // Ki·ªÉm tra xem tokenURI c√≥ h·ª£p l·ªá kh√¥ng
    if (!tokenURI || tokenURI === "") {
      console.log("\n‚ùå C·∫¢NH B√ÅO: Token URI r·ªóng!");
      console.log("MetaMask c·∫ßn Token URI ƒë·ªÉ hi·ªÉn th·ªã metadata NFT");
      return;
    }
    
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng URI
    if (tokenURI.startsWith("ipfs://")) {
      console.log("\n‚úÖ Token URI s·ª≠ d·ª•ng IPFS protocol");
      const ipfsHash = tokenURI.replace("ipfs://", "");
      console.log(`üì¶ IPFS Hash: ${ipfsHash}`);
      console.log(`\nüí° ƒê·ªÉ xem metadata, truy c·∫≠p:`);
      console.log(`   https://gateway.pinata.cloud/ipfs/${ipfsHash}`);
      console.log(`   ho·∫∑c https://ipfs.io/ipfs/${ipfsHash}`);
      
      // Th·ª≠ fetch metadata
      console.log("\nüîÑ ƒêang fetch metadata t·ª´ IPFS...");
      const axios = require("axios");
      try {
        const response = await axios.get(`https://gateway.pinata.cloud/ipfs/${ipfsHash}`, {
          timeout: 10000
        });
        console.log("\n‚úÖ Metadata t·ª´ IPFS:");
        console.log(JSON.stringify(response.data, null, 2));
      } catch (error) {
        console.log(`\n‚ö†Ô∏è  Kh√¥ng th·ªÉ fetch metadata: ${error.message}`);
        console.log("Metadata c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c pin ho·∫∑c IPFS gateway ch·∫≠m");
      }
    } else if (tokenURI.startsWith("http")) {
      console.log("\n‚úÖ Token URI s·ª≠ d·ª•ng HTTP/HTTPS");
      console.log(`üí° URL: ${tokenURI}`);
    } else {
      console.log("\n‚ö†Ô∏è  Token URI c√≥ ƒë·ªãnh d·∫°ng kh√¥ng chu·∫©n");
      console.log("MetaMask c√≥ th·ªÉ kh√¥ng hi·ªÉn th·ªã ƒë∆∞·ª£c NFT");
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('\nüì± TH√îNG TIN IMPORT V√ÄO METAMASK:');
    console.log('='.repeat(60));
    console.log(`Network: Ganache Local (localhost:8545, Chain ID: 1337)`);
    console.log(`Account: ${owner}`);
    console.log(`Contract Address: ${process.env.NFT_CONTRACT_ADDRESS}`);
    console.log(`Token ID: ${tokenId}`);
    console.log('='.repeat(60));
    
    console.log('\nüí° L∆ØU √ù:');
    console.log('- MetaMask c·∫ßn c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c metadata URI');
    console.log('- ƒê·ªëi v·ªõi IPFS, MetaMask s·ª≠ d·ª•ng gateway c√¥ng khai');
    console.log('- Metadata ph·∫£i c√≥ ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá');
    console.log('- ·∫¢nh NFT ph·∫£i l√† URL c√¥ng khai ho·∫∑c IPFS URI');
    console.log('='.repeat(60) + '\n');
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    
    if (error.message.includes("ERC721NonexistentToken")) {
      console.log("\n‚ö†Ô∏è  NFT n√†y kh√¥ng t·ªìn t·∫°i tr√™n blockchain!");
      console.log("H√£y ki·ªÉm tra l·∫°i Token ID");
    }
  }
}

// Ki·ªÉm tra NFT #1
const tokenId = process.argv[2] || 1;
checkNFTMetadata(tokenId);
