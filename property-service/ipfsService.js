const axios = require("axios");
const FormData = require("form-data");
require("dotenv").config();

/**
 * IPFS Service - Upload files and metadata to IPFS via Pinata
 */

const PINATA_API_KEY = process.env.PINATA_API_KEY;
const PINATA_API_SECRET = process.env.PINATA_API_SECRET;
const PINATA_JWT = process.env.PINATA_JWT;

/**
 * Upload JSON metadata to IPFS
 * @param {Object} metadata - NFT metadata object
 * @returns {Promise<Object>} - IPFS hash and URL
 */
async function uploadMetadataToIPFS(metadata) {
  try {
    // Check if we can reach Pinata
    const url = "https://api.pinata.cloud/pinning/pinJSONToIPFS";

    const response = await axios.post(url, metadata, {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${PINATA_JWT}`,
      },
      timeout: 10000, // 10 second timeout
    });

    const ipfsHash = response.data.IpfsHash;
    const tokenURI = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;

    console.log("‚úÖ Metadata uploaded to IPFS:", ipfsHash);

    return {
      ipfsHash,
      tokenURI,
    };
  } catch (error) {
    console.error(
      "‚ùå Error uploading metadata to IPFS:",
      error.response?.data || error.message
    );

    // Fallback for development/offline mode
    if (
      process.env.NODE_ENV === "development" ||
      error.code === "ENOTFOUND" ||
      error.code === "ETIMEDOUT"
    ) {
      console.warn("‚ö†Ô∏è  Using mock IPFS hash for development/offline mode");

      // Generate a deterministic mock hash from metadata
      const mockHash = `Qm${Buffer.from(JSON.stringify(metadata))
        .toString("base64")
        .substring(0, 44)}`;
      const tokenURI = `https://gateway.pinata.cloud/ipfs/${mockHash}`;

      console.log("üîß Mock IPFS Hash:", mockHash);

      return {
        ipfsHash: mockHash,
        tokenURI,
      };
    }

    throw new Error("Failed to upload metadata to IPFS");
  }
}

/**
 * Upload file to IPFS
 * @param {Buffer} fileBuffer - File buffer
 * @param {String} fileName - File name
 * @returns {Promise<Object>} - IPFS hash and URL
 */
async function uploadFileToIPFS(fileBuffer, fileName) {
  try {
    const url = "https://api.pinata.cloud/pinning/pinFileToIPFS";

    const formData = new FormData();
    formData.append("file", fileBuffer, fileName);

    const response = await axios.post(url, formData, {
      headers: {
        ...formData.getHeaders(),
        Authorization: `Bearer ${PINATA_JWT}`,
      },
      maxBodyLength: Infinity,
      timeout: 15000, // 15 second timeout
    });

    const ipfsHash = response.data.IpfsHash;
    const fileURL = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;

    console.log("‚úÖ File uploaded to IPFS:", ipfsHash);

    return {
      ipfsHash,
      fileURL,
    };
  } catch (error) {
    console.error(
      "‚ùå Error uploading file to IPFS:",
      error.response?.data || error.message
    );

    // Fallback for development/offline mode
    if (
      process.env.NODE_ENV === "development" ||
      error.code === "ENOTFOUND" ||
      error.code === "ETIMEDOUT"
    ) {
      console.warn(
        "‚ö†Ô∏è  Using mock IPFS hash for file in development/offline mode"
      );

      const mockHash = `Qm${Buffer.from(fileName)
        .toString("base64")
        .substring(0, 44)}`;
      const fileURL = `https://gateway.pinata.cloud/ipfs/${mockHash}`;

      console.log("üîß Mock File IPFS Hash:", mockHash);

      return {
        ipfsHash: mockHash,
        fileURL,
      };
    }

    throw new Error("Failed to upload file to IPFS");
  }
}

/**
 * Build NFT metadata from property data
 * @param {Object} property - Property document
 * @returns {Object} - NFT metadata in ERC-721 standard format
 */
function buildNFTMetadata(property) {
  const metadata = {
    name: property.name,
    description: property.description,
    image: property.media?.images?.[0]?.url || "",
    attributes: [],
  };

  // Add basic attributes
  metadata.attributes.push({
    trait_type: "Lo·∫°i h√¨nh BƒêS",
    value: getPropertyTypeName(property.propertyType),
  });

  // Add location attributes
  if (property.location.address) {
    metadata.attributes.push({
      trait_type: "ƒê·ªãa ch·ªâ",
      value: property.location.address,
    });
  }

  if (property.location.city) {
    metadata.attributes.push({
      trait_type: "Th√†nh ph·ªë",
      value: property.location.city,
    });
  }

  if (property.location.district) {
    metadata.attributes.push({
      trait_type: "Qu·∫≠n/Huy·ªán",
      value: property.location.district,
    });
  }

  // Add type-specific attributes
  const details = property.details;

  switch (property.propertyType) {
    case "apartment":
      addIfExists(metadata.attributes, "T√™n d·ª± √°n", details.projectName);
      addIfExists(metadata.attributes, "M√£ cƒÉn h·ªô", details.apartmentCode);
      addIfExists(metadata.attributes, "T√≤a (Block/Tower)", details.block);
      addIfExists(metadata.attributes, "T·∫ßng (Floor)", details.floor);
      addIfExists(
        metadata.attributes,
        "Di·ªán t√≠ch tim t∆∞·ªùng",
        details.grossArea
      );
      addIfExists(metadata.attributes, "Di·ªán t√≠ch th√¥ng th·ªßy", details.netArea);
      addIfExists(metadata.attributes, "S·ªë ph√≤ng ng·ªß", details.bedrooms);
      addIfExists(metadata.attributes, "S·ªë ph√≤ng t·∫Øm", details.bathrooms);
      addIfExists(
        metadata.attributes,
        "H∆∞·ªõng ban c√¥ng",
        details.balconyDirection
      );
      addIfExists(
        metadata.attributes,
        "T√¨nh tr·∫°ng n·ªôi th·∫•t",
        details.interiorStatus
      );
      addIfExists(metadata.attributes, "Ph√°p l√Ω", details.legalStatus);
      break;

    case "land":
      addIfExists(metadata.attributes, "S·ªë th·ª≠a", details.landNumber);
      addIfExists(metadata.attributes, "T·ªù b·∫£n ƒë·ªì s·ªë", details.mapSheetNumber);
      addIfExists(metadata.attributes, "T·ªça ƒë·ªô GPS", details.gpsCoordinates);
      addIfExists(
        metadata.attributes,
        "Di·ªán t√≠ch",
        `${details.area?.value}${details.area?.unit}`
      );
      addIfExists(
        metadata.attributes,
        "Chi·ªÅu ngang (M·∫∑t ti·ªÅn)",
        details.frontWidth
      );
      addIfExists(metadata.attributes, "Chi·ªÅu d√†i", details.length);
      addIfExists(metadata.attributes, "Lo·∫°i ƒë·∫•t", details.landType);
      addIfExists(metadata.attributes, "Quy ho·∫°ch", details.zoning);
      addIfExists(metadata.attributes, "M·∫∑t ti·ªÅn ƒë∆∞·ªùng", details.roadFrontage);
      break;

    case "house":
    case "villa":
      addIfExists(metadata.attributes, "Di·ªán t√≠ch ƒë·∫•t", details.landArea);
      addIfExists(
        metadata.attributes,
        "Di·ªán t√≠ch x√¢y d·ª±ng",
        details.constructionArea
      );
      addIfExists(metadata.attributes, "Di·ªán t√≠ch s·ª≠ d·ª•ng", details.usableArea);
      addIfExists(metadata.attributes, "K·∫øt c·∫•u", details.structure);
      addIfExists(metadata.attributes, "S·ªë ph√≤ng ng·ªß", details.bedrooms);
      addIfExists(metadata.attributes, "S·ªë ph√≤ng t·∫Øm", details.bathrooms);
      addIfExists(metadata.attributes, "H∆∞·ªõng nh√†", details.houseDirection);
      addIfExists(metadata.attributes, "M·∫∑t ti·ªÅn ƒë∆∞·ªùng", details.roadFrontage);
      addIfExists(
        metadata.attributes,
        "NƒÉm x√¢y d·ª±ng",
        details.constructionYear
      );
      addIfExists(metadata.attributes, "Ph√°p l√Ω", details.legalStatus);
      break;
  }

  // Add price
  metadata.attributes.push({
    trait_type: "Gi√°",
    value: `${property.price.amount.toLocaleString()} ${
      property.price.currency
    }`,
  });

  // Add additional attributes
  if (details.additionalAttributes && details.additionalAttributes.length > 0) {
    details.additionalAttributes.forEach((attr) => {
      metadata.attributes.push({
        trait_type: attr.trait_type,
        value: attr.value,
      });
    });
  }

  return metadata;
}

/**
 * Helper function to add attribute if value exists
 */
function addIfExists(attributes, trait_type, value) {
  if (value !== undefined && value !== null && value !== "") {
    attributes.push({ trait_type, value: String(value) });
  }
}

/**
 * Get property type display name
 */
function getPropertyTypeName(type) {
  const names = {
    apartment: "CƒÉn h·ªô chung c∆∞",
    land: "ƒê·∫•t n·ªÅn",
    house: "Nh√† ph·ªë",
    villa: "Bi·ªát th·ª±",
  };
  return names[type] || type;
}

module.exports = {
  uploadMetadataToIPFS,
  uploadFileToIPFS,
  buildNFTMetadata,
};
